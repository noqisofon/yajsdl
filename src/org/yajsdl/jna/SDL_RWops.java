package org.yajsdl.jna;

import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;


/**
 * <i>native declaration : /usr/include/SDL/SDL_rwops.h</i><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public class SDL_RWops extends Structure {
    /**
     * Seek to 'offset' relative to whence, one of stdio's whence values:<br>
     * SEEK_SET, SEEK_CUR, SEEK_END<br>
     * Returns the final offset in the data source.<br>
     * C type : seek_callback
     */
    public SDL_RWops.seek_callback  seek;
    /**
     * Read up to 'maxnum' objects each of size 'size' from the data<br>
     * source to the area pointed at by 'ptr'.<br>
     * Returns the number of objects read, or -1 if the read failed.<br>
     * C type : read_callback
     */
    public SDL_RWops.read_callback  read;
    /**
     * Write exactly 'num' objects each of size 'objsize' from the area<br>
     * pointed at by 'ptr' to data source.<br>
     * Returns 'num', or -1 if the write failed.<br>
     * C type : write_callback
     */
    public SDL_RWops.write_callback write;
    /**
     * Close and free an allocated SDL_FSops structure<br>
     * C type : close_callback
     */
    public SDL_RWops.close_callback close;
    // / C type : Uint32
    public int                      type;
    // / C type : hidden_union
    public hidden_union             hidden;

    // / <i>native declaration : /usr/include/SDL/SDL_rwops.h</i>
    public interface seek_callback extends Callback {
        int apply(SDL_RWops context, int offset, int whence);
    };

    // / <i>native declaration : /usr/include/SDL/SDL_rwops.h</i>
    public interface read_callback extends Callback {
        int apply(SDL_RWops context, Pointer ptr, int size, int maxnum);
    };

    // / <i>native declaration : /usr/include/SDL/SDL_rwops.h</i>
    public interface write_callback extends Callback {
        int apply(SDL_RWops context, Pointer ptr, int size, int num);
    };

    // / <i>native declaration : /usr/include/SDL/SDL_rwops.h</i>
    public interface close_callback extends Callback {
        int apply(SDL_RWops context);
    };

    // / <i>native declaration : /usr/include/SDL/SDL_rwops.h:64</i>
    public static class hidden_union extends Union {
        // / C type : win32io_struct
        public win32io_struct win32io;
        // / C type : stdio_struct
        public stdio_struct   stdio;
        // / C type : mem_struct
        public mem_struct     mem;
        // / C type : unknown_struct
        public unknown_struct unknown;

        // / <i>native declaration : /usr/include/SDL/SDL_rwops.h:66</i>
        public static class win32io_struct extends Structure {
            public int           append;
            // / C type : void*
            public Pointer       h;
            // / C type : buffer_struct
            public buffer_struct buffer;

            // / <i>native declaration : /usr/include/SDL/SDL_rwops.h:69</i>
            public static class buffer_struct extends Structure {
                // / C type : void*
                public Pointer data;
                public int     size;
                public int     left;


                public buffer_struct() {
                    super();
                    initFieldOrder();
                }


                protected void initFieldOrder() {
                    setFieldOrder( new java.lang.String[] { "data", "size", "left" } );
                }


                // / @param data C type : void*
                public buffer_struct(Pointer data, int size, int left) {
                    super();
                    this.data = data;
                    this.size = size;
                    this.left = left;
                    initFieldOrder();
                }

                public static class ByReference extends buffer_struct implements Structure.ByReference {

                };

                public static class ByValue extends buffer_struct implements Structure.ByValue {

                };
            };


            public win32io_struct() {
                super();
                initFieldOrder();
            }


            protected void initFieldOrder() {
                setFieldOrder( new java.lang.String[] { "append", "h", "buffer" } );
            }


            /**
             * @param h
             *            C type : void*<br>
             * @param buffer
             *            C type : buffer_struct
             */
            public win32io_struct(int append, Pointer h, buffer_struct buffer) {
                super();
                this.append = append;
                this.h = h;
                this.buffer = buffer;
                initFieldOrder();
            }

            public static class ByReference extends win32io_struct implements Structure.ByReference {

            };

            public static class ByValue extends win32io_struct implements Structure.ByValue {

            };
        };

        // / <i>native declaration : /usr/include/SDL/SDL_rwops.h:77</i>
        public static class stdio_struct extends Structure {
            public int     autoclose;
            // / C type : FILE*
            public Pointer fp;


            public stdio_struct() {
                super();
                initFieldOrder();
            }


            protected void initFieldOrder() {
                setFieldOrder( new java.lang.String[] { "autoclose", "fp" } );
            }


            // / @param fp C type : FILE*
            public stdio_struct(int autoclose, Pointer fp) {
                super();
                this.autoclose = autoclose;
                this.fp = fp;
                initFieldOrder();
            }

            public static class ByReference extends stdio_struct implements Structure.ByReference {

            };

            public static class ByValue extends stdio_struct implements Structure.ByValue {

            };
        };

        // / <i>native declaration : /usr/include/SDL/SDL_rwops.h:82</i>
        public static class mem_struct extends Structure {
            // / C type : Uint8*
            public Pointer base;
            // / C type : Uint8*
            public Pointer here;
            // / C type : Uint8*
            public Pointer stop;


            public mem_struct() {
                super();
                initFieldOrder();
            }


            protected void initFieldOrder() {
                setFieldOrder( new java.lang.String[] { "base", "here", "stop" } );
            }


            /**
             * @param base
             *            C type : Uint8*<br>
             * @param here
             *            C type : Uint8*<br>
             * @param stop
             *            C type : Uint8*
             */
            public mem_struct(Pointer base, Pointer here, Pointer stop) {
                super();
                this.base = base;
                this.here = here;
                this.stop = stop;
                initFieldOrder();
            }

            public static class ByReference extends mem_struct implements Structure.ByReference {

            };

            public static class ByValue extends mem_struct implements Structure.ByValue {

            };
        };

        // / <i>native declaration : /usr/include/SDL/SDL_rwops.h:87</i>
        public static class unknown_struct extends Structure {
            // / C type : void*
            public Pointer data1;


            public unknown_struct() {
                super();
                initFieldOrder();
            }


            protected void initFieldOrder() {
                setFieldOrder( new java.lang.String[] { "data1" } );
            }


            // / @param data1 C type : void*
            public unknown_struct(Pointer data1) {
                super();
                this.data1 = data1;
                initFieldOrder();
            }

            public static class ByReference extends unknown_struct implements Structure.ByReference {

            };

            public static class ByValue extends unknown_struct implements Structure.ByValue {

            };
        };


        public hidden_union() {
            super();
        }


        // / @param win32io C type : win32io_struct
        public hidden_union(win32io_struct win32io) {
            super();
            this.win32io = win32io;
            setType( win32io_struct.class );
        }


        // / @param stdio C type : stdio_struct
        public hidden_union(stdio_struct stdio) {
            super();
            this.stdio = stdio;
            setType( stdio_struct.class );
        }


        // / @param mem C type : mem_struct
        public hidden_union(mem_struct mem) {
            super();
            this.mem = mem;
            setType( mem_struct.class );
        }


        // / @param unknown C type : unknown_struct
        public hidden_union(unknown_struct unknown) {
            super();
            this.unknown = unknown;
            setType( unknown_struct.class );
        }

        public static class ByReference extends hidden_union implements Structure.ByReference {

        };

        public static class ByValue extends hidden_union implements Structure.ByValue {

        };
    };


    public SDL_RWops() {
        super();
        initFieldOrder();
    }


    protected void initFieldOrder() {
        setFieldOrder( new java.lang.String[] { "seek", "read", "write", "close", "type", "hidden" } );
    }


    /**
     * @param seek
     *            Seek to 'offset' relative to whence, one of stdio's whence
     *            values:<br>
     *            SEEK_SET, SEEK_CUR, SEEK_END<br>
     *            Returns the final offset in the data source.<br>
     *            C type : seek_callback<br>
     * @param read
     *            Read up to 'maxnum' objects each of size 'size' from the data<br>
     *            source to the area pointed at by 'ptr'.<br>
     *            Returns the number of objects read, or -1 if the read failed.<br>
     *            C type : read_callback<br>
     * @param write
     *            Write exactly 'num' objects each of size 'objsize' from the
     *            area<br>
     *            pointed at by 'ptr' to data source.<br>
     *            Returns 'num', or -1 if the write failed.<br>
     *            C type : write_callback<br>
     * @param close
     *            Close and free an allocated SDL_FSops structure<br>
     *            C type : close_callback<br>
     * @param type
     *            C type : Uint32<br>
     * @param hidden
     *            C type : hidden_union
     */
    public SDL_RWops(SDL_RWops.seek_callback seek, SDL_RWops.read_callback read, SDL_RWops.write_callback write,
            SDL_RWops.close_callback close, int type, hidden_union hidden) {
        super();
        this.seek = seek;
        this.read = read;
        this.write = write;
        this.close = close;
        this.type = type;
        this.hidden = hidden;
        initFieldOrder();
    }

    public static class ByReference extends SDL_RWops implements Structure.ByReference {

    };

    public static class ByValue extends SDL_RWops implements Structure.ByValue {

    };
}
