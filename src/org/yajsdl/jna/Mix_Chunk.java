package org.yajsdl.jna;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;


/**
 * <i>native declaration : /usr/include/SDL/SDL_mixer.h</i><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public class Mix_Chunk extends Structure {
    public int     allocated;
    // / C type : Uint8*
    public Pointer abuf;
    // / C type : Uint32
    public int     /* Uint32 */alen;
    /**
     * Per-sample volume, 0-128<br>
     * C type : Uint8
     */
    public byte    volume;


    public Mix_Chunk() {
        super();
        initFieldOrder();
    }


    protected void initFieldOrder() {
        setFieldOrder( new java.lang.String[] { "allocated", "abuf", "alen", "volume" } );
    }


    /**
     * @param abuf
     *            C type : Uint8*<br>
     * @param alen
     *            C type : Uint32<br>
     * @param volume
     *            Per-sample volume, 0-128<br>
     *            C type : Uint8
     */
    public Mix_Chunk(int allocated, Pointer abuf, int/* Uint32 */alen, byte volume) {
        super();
        this.allocated = allocated;
        this.abuf = abuf;
        this.alen = alen;
        this.volume = volume;
        initFieldOrder();
    }

    public static class ByReference extends Mix_Chunk implements Structure.ByReference {

    };

    public static class ByValue extends Mix_Chunk implements Structure.ByValue {

    };
}
