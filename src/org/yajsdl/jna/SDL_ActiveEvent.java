package org.yajsdl.jna;

import com.sun.jna.Structure;


/**
 * <i>native declaration : /usr/include/SDL/SDL_events.h</i><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public class SDL_ActiveEvent extends Structure {
    /**
     * < SDL_ACTIVEEVENT<br>
     * C type : Uint8
     */
    public byte type;
    /**
     * < Whether given states were gained or lost (1/0)<br>
     * C type : Uint8
     */
    public byte gain;
    /**
     * < A mask of the focus states<br>
     * C type : Uint8
     */
    public byte state;


    public SDL_ActiveEvent() {
        super();
        initFieldOrder();
    }


    protected void initFieldOrder() {
        setFieldOrder( new java.lang.String[] { "type", "gain", "state" } );
    }


    /**
     * @param type
     *            < SDL_ACTIVEEVENT<br>
     *            C type : Uint8<br>
     * @param gain
     *            < Whether given states were gained or lost (1/0)<br>
     *            C type : Uint8<br>
     * @param state
     *            < A mask of the focus states<br>
     *            C type : Uint8
     */
    public SDL_ActiveEvent(byte type, byte gain, byte state) {
        super();
        this.type = type;
        this.gain = gain;
        this.state = state;
        initFieldOrder();
    }

    public static class ByReference extends SDL_ActiveEvent implements Structure.ByReference {

    };

    public static class ByValue extends SDL_ActiveEvent implements Structure.ByValue {

    };
}
