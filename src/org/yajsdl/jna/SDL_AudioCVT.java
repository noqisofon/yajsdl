package org.yajsdl.jna;

import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;


/**
 * <i>native declaration : /usr/include/SDL/SDL_audio.h</i><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 */
public class SDL_AudioCVT extends Structure {
    // / < Set to 1 if conversion possible
    public int                             needed;
    /**
     * < Source audio format<br>
     * C type : Uint16
     */
    public short                           src_format;
    /**
     * < Target audio format<br>
     * C type : Uint16
     */
    public short                           dst_format;
    // / < Rate conversion increment
    public double                          rate_incr;
    /**
     * < Buffer to hold entire audio data<br>
     * C type : Uint8*
     */
    public Pointer                         buf;
    // / < Length of original audio buffer
    public int                             len;
    // / < Length of converted audio buffer
    public int                             len_cvt;
    // / < buffer must be len*len_mult big
    public int                             len_mult;
    // / < Given len, final size is len*len_ratio
    public double                          len_ratio;
    // / C type : filters_callback[10]
    public SDL_AudioCVT.filters_callback[] filters = new SDL_AudioCVT.filters_callback[( 10 )];
    // / < Current audio conversion function
    public int                             filter_index;

    // / <i>native declaration : /usr/include/SDL/SDL_audio.h</i>
    public interface filters_callback extends Callback {
        void apply(SDL_AudioCVT cvt, short format);
    };


    public SDL_AudioCVT() {
        super();
        initFieldOrder();
    }


    protected void initFieldOrder() {
        setFieldOrder( new java.lang.String[] { "needed", "src_format", "dst_format", "rate_incr", "buf", "len",
            "len_cvt", "len_mult", "len_ratio", "filters", "filter_index" } );
    }

    public static class ByReference extends SDL_AudioCVT implements Structure.ByReference {

    };

    public static class ByValue extends SDL_AudioCVT implements Structure.ByValue {

    };
}
