package yajsdl.jna;

import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;


/**
 * <i>native declaration : /usr/include/SDL/SDL_audio.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SDL_AudioSpec extends Structure {
	/// < DSP frequency -- samples per second
	public int freq;
	/**
	 * < Audio data format<br>
	 * C type : Uint16
	 */
	public short format;
	/**
	 * < Number of channels: 1 mono, 2 stereo<br>
	 * C type : Uint8
	 */
	public byte channels;
	/**
	 * < Audio buffer silence value (calculated)<br>
	 * C type : Uint8
	 */
	public byte silence;
	/**
	 * < Audio buffer size in samples (power of 2)<br>
	 * C type : Uint16
	 */
	public short samples;
	/**
	 * < Necessary for some compile environments<br>
	 * C type : Uint16
	 */
	public short padding;
	/**
	 * < Audio buffer size in bytes (calculated)<br>
	 * C type : Uint32
	 */
	public int size;
	/**
	 * This function is called when the audio device needs more data.<br>
	 * *  @param[out] stream	A pointer to the audio data buffer<br>
	 *  @param[in]  len	The length of the audio buffer in bytes.<br>
	 * *  Once the callback returns, the buffer will no longer be valid.<br>
	 *  Stereo samples are stored in a LRLRLR ordering.<br>
	 * C type : callback_callback
	 */
	public SDL_AudioSpec.callback_callback callback;
	/// C type : void*
	public Pointer userdata;
	/// <i>native declaration : /usr/include/SDL/SDL_audio.h</i>
	public interface callback_callback extends Callback {
		void apply(Pointer userdata, Pointer stream, int len);
	};
	public SDL_AudioSpec() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"freq", "format", "channels", "silence", "samples", "padding", "size", "callback", "userdata"});
	}
	/**
	 * @param freq < DSP frequency -- samples per second<br>
	 * @param format < Audio data format<br>
	 * C type : Uint16<br>
	 * @param channels < Number of channels: 1 mono, 2 stereo<br>
	 * C type : Uint8<br>
	 * @param silence < Audio buffer silence value (calculated)<br>
	 * C type : Uint8<br>
	 * @param samples < Audio buffer size in samples (power of 2)<br>
	 * C type : Uint16<br>
	 * @param padding < Necessary for some compile environments<br>
	 * C type : Uint16<br>
	 * @param size < Audio buffer size in bytes (calculated)<br>
	 * C type : Uint32<br>
	 * @param callback This function is called when the audio device needs more data.<br>
	 * *  @param[out] stream	A pointer to the audio data buffer<br>
	 *  @param[in]  len	The length of the audio buffer in bytes.<br>
	 * *  Once the callback returns, the buffer will no longer be valid.<br>
	 *  Stereo samples are stored in a LRLRLR ordering.<br>
	 * C type : callback_callback<br>
	 * @param userdata C type : void*
	 */
	public SDL_AudioSpec(int freq, short format, byte channels, byte silence, short samples, short padding, int size, SDL_AudioSpec.callback_callback callback, Pointer userdata) {
		super();
		this.freq = freq;
		this.format = format;
		this.channels = channels;
		this.silence = silence;
		this.samples = samples;
		this.padding = padding;
		this.size = size;
		this.callback = callback;
		this.userdata = userdata;
		initFieldOrder();
	}
	public static class ByReference extends SDL_AudioSpec implements Structure.ByReference {
		
	};
	public static class ByValue extends SDL_AudioSpec implements Structure.ByValue {
		
	};
}
